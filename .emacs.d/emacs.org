#+title: My Literate Emacs Configuration
#+author: Kjartan Másson
#+options: toc:nil
#+auto_tangle: t

My literate emacs configuration

#+toc: headlines 8 insert TOC here, with eight headline levels

** Motivation & Goals

+ Main focus on keyboard driven workflow, but fully embrace & integrate the convenience of mouse specific functionality

+ Focus the configuration for cross-platform graphical sessions, but try to have as much terminal-mode compatibility as possible (f.x. choosing nerd-icons over regular icons)
  
+ Prefer enhancing & integrating built-in emacs capabilities & features instead of replacing them

+ Draw inspiration & integrate new functionality from modern editors, such as llm features in [[https://www.cursor.com/][cursor]]

+ Harness the power of emacs org-mode, making use of advanced features when applicable as a showcase & future reference, such as:
  - Tangled source code blocks (perhaps de-tangle as well)
  - Tags & TODOs with agenda integration
  - Citations & references
  - File & project specific org-mode bahviour
  - image display
    
** Literate Programming

** Inspiration

*** positron-solutions

[[https://github.com/positron-solutions][Github]]
[[https://www.youtube.com/@Positron-gv7do][YouTube]]

*** Karthinks

**** Check if he uses space indent in org-mode source code blocks

+ Check how he likes to integrate poppler for various buffers

*** Protesilaos

+ Check how he handles general emacs configuration with or without use-package in his literate configuration


*** Doom Emacs

**** TODO Investigate org-mode bindings
  
** Wanted functionality

+ TODO Icelandic dictionary lookup
+ GPTEL tooling
+ Mode specific <leader> s o
+ Context-aware multi-language spell checking
+ Context & text-object aware at-point help/documentation keymaps
+ drag-drop org-mode images
+ org-mode inline code font
+ length indicator
+ Mousescroll in in-buffer completion tooltips

** TODO Tweaks

+ consistent window focus between helpful & help-mode buffers
+ add hook to re-apply custom face-attributes when changing themes
  
* Configuration Files

** early-init.el

This file is loaded before the package system and GUI is initialized, so in it you can customize variables that affect the package initialization process, such as package-enable-at-startup, package-load-list, and package-user-dir. Note that variables like package-archives which only affect the installation of new packages, and not the process of making already-installed packages available, may be customized in the regular init file. See Package Installation.

#+begin_src elisp :tangle early-init.el
  ;;; -*- lexical-binding: t -*-
#+end_src

** init.el

#+begin_src elisp :tangle init.el
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src elisp :tangle init.el :comments link
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'org)
  (straight-use-package 'use-package)
#+end_src

** defun.el

/Custom elisp functions used in my configuration/

#+begin_src elisp :tangle defun.el
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src elisp :tangle init.el :comments link
  ;; (load (expand-file-name "defun.el" user-emacs-directory))
  (load (expand-file-name "defun.el"
                          (file-name-directory load-file-name)))
#+end_src

** defvar.el

/Custom elisp variables used in my configuration/

#+begin_src elisp :tangle defvar.el
  ;;; -*- lexical-binding: t -*-
#+end_src

#+begin_src elisp :tangle init.el :comments link
  ;; (load (expand-file-name "defvar.el" user-emacs-directory))
  (load (expand-file-name "defvar.el"
                          (file-name-directory load-file-name)))
#+end_src

** org-latex-preview

#+begin_src elisp :tangle org-latex-preview.el :comments link
  (use-package org
    :defer
    :straight `(org
		:fork (:host nil
			   :repo "https://git.tecosaur.net/tec/org-mode.git"
			   :branch "dev"
			   :remote "tecosaur")
		:files (:defaults "etc")
		:build t
		:pre-build
		(with-temp-file "org-version.el"
		(require 'lisp-mnt)
		(let ((version
			 (with-temp-buffer
			 (insert-file-contents "lisp/org.el")
			 (lm-header "version")))
			(git-version
			 (string-trim
			(with-temp-buffer
			  (call-process "git" nil t nil "rev-parse" "--short" "HEAD")
			  (buffer-string)))))
		  (insert
		   (format "(defun org-release () \"The release version of Org.\" %S)\n" version)
		   (format "(defun org-git-version () \"The truncate git commit hash of Org mode.\" %S)\n" git-version)
		   "(provide 'org-version)\n")))
		:pin nil))
#+end_src

#+begin_src elisp :tangle init.el
  ;; (load (expand-file-name "org-latex-preview.el" user-emacs-directory))
  ;; (load (expand-file-name "org-latex-preview.el"
  ;;                        (file-name-directory load-file-name)))
  ;; (use-package org)  
  ;; (require 'org)
#+end_src


* Other Files

** custom.el

/File reserved for interactive customizations made inside of emacs/

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :config
    (setq custom-file (concat user-emacs-directory "custom.el"))
    (when (file-exists-p (concat user-emacs-directory "custom.el"))
      (load (concat user-emacs-directory "custom.el"))))
#+end_src

** local.el

/File reserved for machine specific configurations/

* TODO Dependencies

+ run =M-x nerd-icons-install-fonts=
+ run =M-x tree-sitter-langs-install-latest-grammar=

* Components

** Editor Features

*** File Encoding

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :config
    ;; Set the default coding system for files to UTF-8.
    (modify-coding-system-alist 'file "" 'utf-8))
#+end_src

*** Indent bars

Indent bars are vertical guides that visually represent the indentation levels in a text or code editor. Their main purposes are:

1. Highlighting code structure – They help show nesting levels (like loops, functions, or conditionals) at a glance.

2. Improving readability – Especially in languages where indentation matters (like Python or YAML), indent bars make it easier to follow logic and hierarchy.

3. Navigational aid – They assist in locating block boundaries quickly, particularly in deeply nested code.

**** TODO indent-bars :package:

- [ ] Move all tree-sitter modes I want to operate on into a variable

#+begin_src elisp :tangle init.el :comments link
  (use-package indent-bars
    :straight t
    :custom
    (indent-bars-no-descend-lists t) ; no extra bars in continued func arg lists
    (indent-bars-treesit-support t)
    (indent-bars-treesit-ignore-blank-lines-types '("module"))
    ;; Add other languages as needed
    (indent-bars-treesit-scope '((python function_definition class_definition for_statement
				       if_statement with_statement while_statement)))
    ;; Note: wrap may not be needed if no-descend-list is enough
    ;;(indent-bars-treesit-wrap '((python argument_list parameters ; for python, as an example
    ;;				      list list_comprehension
    ;;				      dictionary dictionary_comprehension
    ;;				      parenthesized_expression subscript)))
    ;; :hook ((python-ts-mode yaml-mode) . indent-bars-mode)
    :hook (((python-base-mode yaml-mode) . indent-bars-mode)
	 (nix-ts-mode . indent-bars-mode)))
#+end_src

*** Line Numbers, Wrapping & More

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :config
    (setq display-line-numbers-width-start t)
    (setq display-line-numbers-type 'relative) ; Set relative line numbers
    (add-hook 'prog-mode-hook '(lambda () (hl-line-mode 1)))
    )
#+end_src

**** Hybrid line numbers :elisp_function:

/Swap between regular & relative line numbers wether you're in evil insert mode or not/

#+begin_src elisp :tangle init.el :comments link
  (defun my/hybrid-line-numbers-evil-insert-state-entry ()
    "Swap to regular line numbers if inside prog-mode"
    (when (derived-mode-p 'prog-mode)
      (setq display-line-numbers-type t)
      (display-line-numbers-mode -1)
      (display-line-numbers-mode 1)
      (hl-line-mode -1)))

  (defun my/hybrid-line-numbers-evil-insert-state-exit ()
    "Swap to relative line numbers if inside prog-mode"
    (when (derived-mode-p 'prog-mode)
      (setq display-line-numbers-type 'relative)
      (display-line-numbers-mode -1)
      (display-line-numbers-mode 1)
      (hl-line-mode 1)))
#+end_src

#+begin_src elisp :tangle init.el :comments link
  (add-hook 'evil-insert-state-entry-hook
  	  #'my/hybrid-line-numbers-evil-insert-state-entry)
  (add-hook 'evil-insert-state-exit-hook
  	  #'my/hybrid-line-numbers-evil-insert-state-exit)
#+end_src

**** For Programming

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :hook
    (prog-mode . electric-pair-local-mode)
    (prog-mode . display-line-numbers-mode)
    (prog-mode . (lambda () (setq-local truncate-lines t)))
    )
#+end_src

**** For Word Processing

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :config
    (setq word-wrap t)

    (defun my/enable-visual-line-mode-and-wrap ()
      "Enable visual line mode and set word wrap in non-programming modes."
      (visual-line-mode 1)
      (variable-pitch-mode 1))
    (add-hook 'org-mode-hook 'my/enable-visual-line-mode-and-wrap)
    )
#+end_src

*** Changing annoying defaults

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :config
    (setq

     ;; Disable the audible bell
     ring-bell-function 'ignore

     ;; Use short answers in prompts (y instead of yes)
     use-short-answers t

     ;; Inhibits the default welcome to emacs startup screen
     inhibit-startup-screen t

     ;; Automatically refresh non-file buffers.
     global-auto-revert-non-file-buffers t

     )

    ;; Disable the tool bar for a cleaner interface
    (tool-bar-mode -1))
#+end_src

*** Bookmarks

Bookmarks will be stored the file: =~/.emacs.d/bookmarks=, and we want it to update every time we add/remove bookmarks.

#+begin_src elisp :tangle init.el :comments link
  (use-package bookmark
    :config
    (setopt bookmark-save-flag 1)
    ;; (run-at-time nil (* 5 60) #'bookmark-save)
    )
#+end_src

*** Undo & Redo

**** undo-fu :package:

Expand builtin emacs undo system with full undo history capabilities

#+begin_src elisp :tangle init.el :comments link
  (use-package undo-fu
    :straight t)
#+end_src

***** undo-fu-session :package:

Recoverable & persistent undo histories by saving them to a file

#+begin_src elisp :tangle init.el :comments link
  (use-package undo-fu-session
    :straight t
    :config
    ;; (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")
    (undo-fu-session-global-mode))
#+end_src

**** vundo :package:

Tree-style redo

#+begin_src elisp :tangle init.el :comments link
  (use-package vundo
    :straight t
    ;; :general
    ;; (:keymaps 'vundo-mode-map
    ;; 	    :states '(normal insert visual)
    ;; 	    "<escape>" 'vundo-quit)
    :config
    (setq vundo-glyph-alist vundo-ascii-symbols)
    :bind (:map vundo-mode-map
  	      ("<escape>" . vundo-quit)))
#+end_src

*** History

Track recent files, locations & more.

**** Minibuffer

The default location of =`savehist-file'= is ="~/.emacs.d/history"=

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :init
    ;; Save minibuffer history to `savehist-file' periodically and when exiting Emacs.
    (savehist-mode 1))
#+end_src

**** Remember last location in file

The default location of =`save-place-file'= is ="~/.emacs.d/places"=

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :init
    ;; Enable saving the place in files for easier return
    (save-place-mode 1))
#+end_src

**** Recently opened files

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :config
    ;; Enable tracking of recently opened files.
    (recentf-mode t))
#+end_src

**** Automatic backups

I want all automatic backups to be stored in =~/.emacs.d/backups/=

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :config
    (setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups/"))))
    (setq auto-save-file-name-transforms `((".*" ,(concat user-emacs-directory "backups/") t))))
#+end_src

*** TODO The TAB key

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    ;; TAB first tries to indent, then complete thing at point
    :config
    (setq tab-always-indent 'complete))
#+end_src

** Completions

|           | minibuffer | in-buffer |
| framework | vertico    | cape      |
| functions | consult    | corfu     |

*** Minibuffer

**** vertico :package:

/A performant and minimalistic vertical completion UI based on the default completion system/

#+begin_src elisp :tangle init.el :comments link
  (use-package vertico
    :straight t
    :custom
    ;; (vertico-scroll-margin 0) ;; Different scroll margin
    ;; (vertico-count 20) ;; Show more candidates
    ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))
#+end_src

***** vertico-directory :package:

/Commands for Ido-like directory navigation/

#+begin_src elisp :tangle init.el :comments link
  (use-package vertico-directory
    :after vertico
    ;; :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

***** vertico-mouse

/Mouse support for scrolling and candidate selection/

#+begin_src elisp :tangle init.el :comments link
  (use-package vertico-mouse
    :after vertico
    :config
    (vertico-mouse-mode t))
#+end_src

**** marginalia :package:

/Adds marginalia to the minibuffer completions/

#+begin_src elisp :tangle init.el :comments link
  (use-package marginalia
    :straight t
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
  	      ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

**** consult :package:

/Search and navigation commands for minibuffer completions/

#+begin_src elisp :tangle init.el :comments link
  (use-package consult
    :straight t
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Tweak the register preview for `consult-register-load',
    ;; `consult-register-store' and the built-in commands.  This improves the
    ;; register formatting, adds thin separator lines, register sorting and hides
    ;; the window mode line.
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
  )
#+end_src

***** consult-todo :package:

/Search and jump hl-todo keywords in buffers with consult/

#+begin_src elisp :tangle init.el :comments link
  (use-package consult-todo
    :straight t
    :after (consult))
#+end_src

**** Mode-specific context

Hide commands in =M-x= which do not apply to the current mode.

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :config
    ;; Hide commands in M-x which do not apply to the current mode.
    (setq read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

*** At-point

**** corfu :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package corfu
    :straight t
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    (corfu-preselect 'first)
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    :bind
    (:map corfu-map
	  ("TAB" . corfu-next) ;; Use TAB for cycling to the next candidate
	  ([tab] . corfu-next) ;; Ensure both TAB and [tab] work
	  ("S-TAB" . corfu-previous) ;; Use Shift-TAB for cycling to the previous candidate
	  ([backtab] . corfu-previous)
	  ("SPC" . corfu-insert-separator))
    :init
    (global-corfu-mode)
    (corfu-popupinfo-mode))
#+end_src

**** cape :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package cape
    :straight t
    ;; Bind prefix keymap providing all Cape commands under a mnemonic key.
    ;; Press C-c p ? to for help.
    :bind ("C-c p" . cape-prefix-map) ;; Alternative key: M-<tab>, M-p, M-+
    ;; Alternatively bind Cape commands individually.
    ;; :bind (("C-c p d" . cape-dabbrev)
    ;;        ("C-c p h" . cape-history)
    ;;        ("C-c p f" . cape-file)
    ;;        ...)
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block)
    ;; (add-hook 'completion-at-point-functions #'cape-history)
    ;; ...
    )
#+end_src

**** embark :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package embark
    :straight t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
#+end_src

***** embark-consult :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package embark-consult
    :after embark
    :straight t)
#+end_src

*** Candidate selection

**** orderless :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package orderless
    :straight t
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

**** prescient :package:

/Simple but effective sorting and filtering of completion candidates/

#+begin_src elisp :tangle init.el :comments link
  (use-package prescient
    :disabled t
    :straight t)
#+end_src

***** vertico-prescient :package:

/Vertico integration for prescient/

#+begin_src elisp :tangle init.el :comments link
  (use-package vertico-prescient
    :disabled t
    :straight t
    :after (prescient vertico)
    :config
    (vertico-prescient-mode t))
    
#+end_src

***** corfu-prescient :package:

/Corfu integration for prescient/

#+begin_src elisp :tangle init.el :comments link
  (use-package corfu-prescient
    :disabled t
    :straight t
    :after (prescient corfu)
    :config
    (corfu-prescient-mode t))
#+end_src


** Fonts

*** Aporetic :font:

[[https://github.com/protesilaos/aporetic][Aporetic fonts - Github]]

+ I like narrow mono-spaced fonts


*** [[https://github.com/protesilaos/fontaine][fontaine]] :package:

+ define detailed font configurations and set them on demand

#+begin_src elisp :tangle init.el :comments link
  (use-package fontaine
  :straight t
  :config
  (locate-user-emacs-file "fontaine-latest-state.eld")
  (setq fontaine-presets
  	'((small
  	   :default-family "Aporetic Serif Mono"
  	   :default-height 80
  	   :variable-pitch-family "Aporetic Sans")
  	  (regular) ; like this it uses all the fallback values and is named `regular'
  	  (medium
  	   :default-weight semilight
  	   :default-height 115
  	   :bold-weight extrabold)
  	  (large
  	   :inherit medium
  	   :default-height 150)
  	  (presentation
  	   :default-height 180)
  	  (adwaita
  	   :default-family "AdwaitaMono Nerd Font Mono"
  	   :fixed-pitch-family "AdwaitaMono Nerd Font Mono"
  	   :variable-pitch-family "Adwaita Sans")
  	  (t
  	   ;; I keep all properties for didactic purposes, but most can be
  	   ;; omitted.  See the fontaine manual for the technicalities:
  	   ;; <https://protesilaos.com/emacs/fontaine>.
  	   :default-family "Aporetic Sans Mono"
  	   :default-weight regular
  	   :default-height 140

           :fixed-pitch-family nil ; falls back to :default-family
           :fixed-pitch-weight nil ; falls back to :default-weight
           :fixed-pitch-height 1.0

           :fixed-pitch-serif-family nil ; falls back to :default-family
           :fixed-pitch-serif-weight nil ; falls back to :default-weight
           :fixed-pitch-serif-height 1.0

           :variable-pitch-family "Aporetic Serif"
           :variable-pitch-weight nil
           :variable-pitch-height 1.0

           :mode-line-active-family nil ; falls back to :default-family
           :mode-line-active-weight nil ; falls back to :default-weight
           :mode-line-active-height 0.9

           :mode-line-inactive-family nil ; falls back to :default-family
           :mode-line-inactive-weight nil ; falls back to :default-weight
           :mode-line-inactive-height 0.9

           :header-line-family nil ; falls back to :default-family
           :header-line-weight nil ; falls back to :default-weight
           :header-line-height 0.9

           :line-number-family nil ; falls back to :default-family
           :line-number-weight nil ; falls back to :default-weight
           :line-number-height 0.9

           :tab-bar-family nil ; falls back to :default-family
           :tab-bar-weight nil ; falls back to :default-weight
           :tab-bar-height 1.0

           :tab-line-family nil ; falls back to :default-family
           :tab-line-weight nil ; falls back to :default-weight
           :tab-line-height 1.0

           :bold-family nil ; use whatever the underlying face has
           :bold-weight bold

           :italic-family nil
           :italic-slant italic

           :line-spacing nil)))

  ;; Set the last preset or fall back to desired style from `fontaine-presets'
  ;; (the `regular' in this case).
  (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))

  ;; Persist the latest font preset when closing/starting Emacs and
  ;; while switching between themes.
  (fontaine-mode 1))
#+end_src

** Keymaps

*** evil :package:

[[https://github.com/emacs-evil/evil][evil - Github]]

#+begin_src elisp :tangle init.el :comments link
  (use-package evil
  :straight t
  :init
  (setq evil-want-keybinding nil) ;; Disable loading a set of keybindings for evil in other modes (using evil-collection instead)
  (setq evil-want-integration t)
  (setq evil-respect-visual-line-mode t)        ;; Whether movement commands respect ‘visual-line-mode’.
  :custom
  (evil-want-C-u-scroll t)                 ;; Makes ‘C-u’ scroll up (like Vim).
  (evil-want-C-u-delete t)                 ;; Makes ‘C-u’ delete on insert mode
  (evil-split-window-below t)              ;; Horizontally split windows are created below.
  (evil-vsplit-window-right t)             ;; Vertically split windows with are created to the right.
  (evil-respect-visual-line-mode t)        ;; Whether movement commands respect ‘visual-line-mode’.
  (evil-undo-system 'undo-fu)
  (evil-toggle-key "C-M-z")           ;; Toggle between emacs and vim bindings with ‘C-u’
  :config
  (evil-mode t)
  (with-eval-after-load 'dired
    (evil-define-key 'normal dired-mode-map "h" 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map "l" 'dired-find-alternate-file))
  )
#+end_src

**** evil-collection :package:

/Collection of Evil bindings for the parts of Emacs that Evil does not cover properly by default/

[[https://github.com/emacs-evil/evil-collection][Github]]

#+begin_src elisp :tangle init.el :comments link
  (use-package evil-collection
    :straight t
    :after (evil diminish)
    :diminish (evil-collection-unimpaired-mode)
    :custom
    (evil-collection-setup-minibuffer t) ;; Setup ‘evil’ bindings in the ‘minibuffer’
    (evil-collection-which-key-setup t) ;; Setup ‘evil’ bindings for ‘which-key’.
    :config
    (setq evil-collection-unimpaired-want-repeat-mode-integration t)
    (evil-collection-init))
#+end_src

**** evil-commentary :package:

/Emulates vim-commentary by Tim Pope/

#+begin_src elisp :tangle init.el :comments link
  (use-package evil-commentary
    :straight t
    :after (evil-collection diminish)
    :diminish evil-commentary-mode
    :config
    (evil-commentary-mode t))
#+end_src

**** evil-surround :package:

/Emulates surround.vim by Tim Pope/

#+begin_src elisp :tangle init.el :comments link
  (use-package evil-surround
    :straight t
    :after evil-collection
    :diminish global-evil-surround-mode
    :config
    (global-evil-surround-mode t))
#+end_src

**** evil-snipe :package:

/Emulates vim-seek and/or vim-sneak/

#+begin_src elisp :tangle init.el :comments link
  (use-package evil-snipe
    :straight t
    :after (evil diminish)
    :diminish (evil-snipe-local-mode)
    :config
    (evil-snipe-mode +1)
    (evil-snipe-override-mode +1)

    ;; and disable in specific modes
    ;; (push 'python-mode evil-snipe-disabled-modes)

    ;; or disable it manually
    ;; (add-hook 'python-mode-hook #'turn-off-evil-snipe-mode)
    ;; (add-hook 'python-mode-hook #'turn-off-evil-snipe-override-mode)
    )
#+end_src

**** evil-textobj-tree-sitter :package:

/Tree-sitter powered textobjects/

#+begin_src elisp :tangle init.el :comments link
  (use-package evil-textobj-tree-sitter
    :straight t
    :after (evil evil-collection)
    :config
    (define-key evil-outer-text-objects-map
  	      "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))
    (define-key evil-inner-text-objects-map
  	      "f" (evil-textobj-tree-sitter-get-textobj "function.inner"))
    (define-key evil-outer-text-objects-map
  	      "c" (evil-textobj-tree-sitter-get-textobj "comment.outer"))
    (define-key evil-inner-text-objects-map
  	      "c" (evil-textobj-tree-sitter-get-textobj "comment.inner"))
    )
#+end_src

**** evil-fringe-mark :package:

Display evil-mode markers in the Emacs fringe 

#+begin_src elisp :tangle init.el :comments link
  (use-package evil-fringe-mark
    :straight t
    :config
    (global-evil-fringe-mark-mode))
#+end_src

*** TODO general.el :package:

[[https://github.com/noctuid/general.el][general.el - Github]]

#+begin_src elisp :tangle init.el :comments link
    (use-package general
      :straight t
      :config
      (general-evil-setup)

      (general-create-definer leader-keys
        :states '(normal insert visual emacs)
        :keymaps 'override
        :prefix "SPC"
        :global-prefix "C-SPC")

      )
#+end_src

**** misc <leader> maps

#+begin_src elisp :tangle init.el :comments link
  (leader-keys
    ;; Execute / Commands
    "<escape>" '(keyboard-escape-quit :which-key t)
    ":" '(execute-extended-command :which-key "execute command")
    "<SPC>" '(popper-toggle :which-key "popper-toggle")
    (kbd "C-SPC") '(popper-toggle :which-key "popper-toggle")
    "<tab>" '(popper-cycle :which-key "popper-cycle"))
#+end_src

**** <leader> b

#+begin_src elisp :tangle init.el :comments link
  (leader-keys
    "b" '(:ignore t :which-key "Buffer")
    "b <escape>" '(keyboard-escape-quit :which-key t)
    "bk"  '(kill-current-buffer :which-key "Kill Current")
    "bn"  '(next-buffer :which-key "Next")
    "bp"  '(previous-buffer :which-key "Previous")
    "bf"  '(consult-buffer :which-key "Find")
    "bs"  '(scratch-buffer :which-key "Scratch Buffer"))
#+end_src

**** <leader> e

#+begin_src elisp :tangle init.el :comments link
  (leader-keys
    "e" '(:ignore t :which-key "eglot")
    "e <escape>" '(keyboard-escape-quit :which-key t)
    "ea"  '(eglot-code-actions :which-key "eglot-code-actions"))
#+end_src

**** <leader> f

#+begin_src elisp :tangle init.el :comments link
  (leader-keys
    "f"  '(:ignore t :which-key "File")
    "f <escape>" '(keyboard-escape-quit :which-key t)
    "fi" '((lambda () (interactive) (find-file user-init-file)) :which-key "open init file")
    "ff"  '(find-file :which-key "Find")
    "fr"  '(recentf :which-key "Recent")
    "fp"  '(project-find-file :which-key "Project"))
#+end_src

**** <leader> g

#+begin_src elisp :tangle init.el :comments link
  (leader-keys
    "g" '(:ignore t :which-key "Toggle")
    "g <escape>" '(keyboard-escape-quit :which-key t)
    "gs" '(magit-status :which-key "Status")
    ;; "gn" '(diff-hl-next-hunk :which-key "Next Hunk")
    ;; "gp" '(diff-hl-previous-hunk :which-key "Previous Hunk")
    )
#+end_src

**** <leader> h

#+begin_src elisp :tangle init.el :comments link
  (leader-keys
    "h" '(:ignore t :which-key "Help")
    "h <escape>" '(keyboard-escape-quit :which-key t)
    "hf" '(helpful-callable :which-key "Callable")
    "hv" '(helpful-variable :which-key "Variable")
    "hk" '(helpful-key :which-key "Key")
    "hx" '(helpful-command :which-key "Command")
    "hd" '(helpful-at-point :which-key "At point")
    "hF" '(helpful-function :which-key "Function")
    "ho" '(helpful-symbol :which-key "Symbol")
    "hm" '(describe-mode :which-key "Major mode")
    "hM" '(describe-minor-mode :which-key "Minor mode")
    "hp" '(describe-package :which-key "Package")
    "ht" '(my/transient-menu :which-key "Transient")
    "hi" '(consult-info :which-key "Information"))
#+end_src

**** <leader> l

#+begin_src elisp :tangle init.el :comments link
  (leader-keys
    "l" '(:ignore t :which-key "LLM")
    "l <escape>" '(keyboard-escape-quit :which-key t)
    "ll" '(gptel :which-key "gptel"))
#+end_src

**** <leader> n

#+begin_src elisp :tangle init.el :comment link
  (leader-keys
    "n" '(:ignore t :which-key "Note")
    "n <escape>" '(keyboard-escape-quit :which-key t)
    ;; "nj" '(denote-journal-new-or-existing-entry :which-key "journal today")
    ;; "nn" '(denote :which-key "new")
    ;; "nf" '(denote-open-or-create :which-key "find")
    "nf" '(org-roam-node-find :which-key "node find")
    "ni" '(org-roam-node-insert :which-key "node insert")
    "nc" '(org-roam-capture :which-key "capture")
    "ng" '(org-roam-graph :which-key "graph")
    "nl" '(org-roam-buffer-toggle :which-key "toggle")
    "nj" '(org-roam-dailies-capture-today :which-key "capture today")
    "nt" '(org-roam-dailies-goto-today :which-key "today"))
#+end_src

**** <leader> o

#+begin_src elisp :tangle init.el :comment link
  (leader-keys
    "o" '(:ignore t :which-key "Open")
    "o <escape>" '(keyboard-escape-quit :which-key t)
    "oo" '(:ignore t :which-key "Other Window"))
#+end_src

**** <leader> p

#+begin_src elisp :tangle init.el :comments link
  (leader-keys
     ;; Project
    "p" '(:ignore t :which-key "Project")
    "p <escape>" '(keyboard-escape-quit :which-key t)
    "pf" '(project-find-file :which-key t))
#+end_src

**** <leader> r

#+begin_src elisp :tangle init.el :comments link
  (leader-keys
    ;; Bookmark / Recent
    "r" '(:ignore t :which-key "Recent")
    "r <escape>" '(keyboard-escape-quit :which-key t)
    "rb" '(bookmark-jump :which-key "bookmark-jump")
    "rm" '(bookmark-set :which-key "bookmark-set")
    "rl" '(bookmark-bmenu-list :which-key "bookmark-bmenu-list")
    "ru" '(vundo :which-key "Undo tree"))
#+end_src

**** <leader> s

#+begin_src elisp :tangle init.el :comments link
  (leader-keys
  ;;;; general s
    "s" '(:ignore t :which-key "Search")
    "s <escape>" '(keyboard-escape-quit :which-key t)
    "sr" '(consult-ripgrep :which-key "ripgrep")
    "so" '(consult-outline :which-key "outline")
    "sh" '(consult-org-heading :which-key "heading")
    "sl" '(consult-line :which-key "line")
    "su" '(vundo :which-key t "undo")
    "st" '(consult-todo-project :which-key t "todo")
    "sG" '(consult-git-grep :which-key t "git-grep"))
#+end_src

**** <leader> t

#+begin_src elisp :tangle init.el :comments link
  (leader-keys
    "t" '(:ignore t :which-key "Toggle")
    "t <escape>" '(keyboard-escape-quit :which-key t)
    "tt" '(modus-themes-toggle :which-key "Theme")
    "tr" '(rainbow-mode  :which-key "Rainbow")
    "tl" '(toggle-truncate-lines :which-key "truncate lines")
    "tp" '(popper-toggle :which-key "popper-toggle")
    "tk" '(keycast-mode-line-mode :which-key "keycast mode-line"))
#+end_src

**** <leader> w

#+begin_src elisp :tangle init.el :comments link
  (leader-keys
    "w" '(:ignore t :which-key "window")
    "w <escape>" '(keyboard-escape-quit :which-key t)
    "wl" '(evil-window-right :which-key "right")
    "wh" '(evil-window-left :which-key "left")
    "wk" '(evil-window-up :which-key "up")
    "wj" '(evil-window-down :which-key "down")
    "wL" '(evil-window-move-far-right :which-key "move right")
    "wH" '(evil-window-move-far-left :which-key "move left")
    "wK" '(evil-window-move-very-top :which-key "move top")
    "wJ" '(evil-window-move-very-bottom :which-key "move bottom")
    "wr" '(evil-window-rotate-downwards :which-key "rotate")
    "ws" '(evil-window-split :which-key "split horizontally")
    "wv" '(evil-window-vsplit :which-key "split vertically")
    "wc" '(evil-window-delete :which-key "delete")
    "wq" '(evil-quit :which-key "quit")
    "wt" '(tab-new :which-key "new tab")
    "wgt" '(evil-tab-next :which-key "next tab")
    "wgT" '(tab-bar-switch-to-prev-tab :which-key "previous tab")
    "wu" '(winner-undo :which-key "undo")
    )
#+end_src

*** Repeat keys

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :config
    (repeat-mode 1))
#+end_src

*** Expand region

**** expreg :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package expreg
    :straight t
    :bind (("C-+" . expreg-expand)
  	 ("C--" . expreg-contract)))
#+end_src

*** Icelandic vim keys

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :after (evil)
    :config
    (evil-global-set-key 'normal "þ" 'evil-search-forward)
    (evil-global-set-key 'normal "Þ" 'evil-search-backward))
#+end_src


** Tree-sitter

*** tree-sitter-langs :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package tree-sitter-langs
    :straight t
    :config
    (setq treesit-load-name-override-list
  	  '((python "python" "tree_sitter_python")
  	    (nix "nix" "tree_sitter_nix")
  	    (json "json" "tree_sitter_json")
  	    (yaml "yaml" "tree_sitter_yaml")
  	    (elisp "elisp" "tree_sitter_elisp")
  	    (markdown "markdown" "tree_sitter_markdown")
  	    (markdown-inline "markdown-inline" "tree_sitter_markdown_inline")
  	    ))
    (setq treesit-extra-load-path
  	  (list tree-sitter-langs--dir
  		(concat tree-sitter-langs--dir "bin/")))
    )
#+end_src

*** treesit-fold :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package treesit-fold
    :straight t
    :config
    (setq treesit-fold-line-count-show t
  	treesit-fold-line-count-format " <%d lines> ")

    ;; Add support for non-ts modes
    ;; (add-hook 'emacs-lisp-mode-hook (lambda () (treesit-parser-create 'elisp)))
    (global-treesit-fold-mode))
#+end_src

** Note Taking

*** org-roam :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package org-roam
    :straight t
    :after (org)
    :custom
    (org-roam-directory "~/org/roam")
    :bind (("C-c n l" . org-roam-buffer-toggle)
  	   ("C-c n f" . org-roam-node-find)
  	   ("C-c n g" . org-roam-graph)
  	   ("C-c n i" . org-roam-node-insert)
  	   ("C-c n c" . org-roam-capture)
  	   ;; Dailies
  	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode))
#+end_src

** Performance

*** Garbage Collection

Emacs is an Elisp interpreter, and when running programs or packages, it can occasionally experience pauses due to garbage collection. By increasing the garbage collection threshold, we reduce these pauses during heavy operations, leading to smoother performance.

#+begin_src elisp :tangle early-init.el :comments link
  (setq gc-cons-threshold #x40000000)

  ;; Set the maximum output size for reading process output, allowing for larger data transfers.
  (setq read-process-output-max (* 1024 1024 4))

  ;; Don't load package.el since we're using Straight
  (setq package-enable-at-startup nil)

  (setq default-frame-alist
	'((width . 100)   ; Width in characters
	  (height . 30))) ; Height in lines
#+end_src

**** gcmh :package:

/Enforce a sneaky Garbage Collection strategy to minimize GC interference with user activity/

#+begin_src elisp :tangle init.el :comments link
  (use-package gcmh
    :straight t
    :after (diminish)
    :diminish gcmh-mode
    :hook
    (after-init-hook . gcmh-mode))
#+end_src

*** Improved Scrolling

**** [[https://github.com/jdtsmith/ultra-scroll][ultra-scroll]] :package:

+ highly optimized, pixel-precise smooth scrolling which can readily keep up with the very high event rates of modern track-pads and high-precision wheel mice.

#+begin_src elisp :tangle init.el :comments link
  (use-package ultra-scroll
    :straight (ultra-scroll :type git :host github :repo "jdtsmith/ultra-scroll")
    :init
    (setq scroll-conservatively 101 ; important!
	  scroll-margin 0) 
    :config
    (ultra-scroll-mode 1))
#+end_src

** org-mode

The killer app that will save my digital life

*** org :builtin:package:

#+begin_src elisp :tangle init.el :comments link
  (use-package org
    :config
    (setq org-blank-before-new-entry
      '((heading . always)
        (plain-list-item . auto)))
    (setq org-auto-align-tags nil
  	  org-hide-emphasis-markers t
  	  org-todo-keywords '((sequence "TODO" "IN PROGRESS" "|" "DONE")))
    ;; (add-hook 'org-mode-hook #'my/org-mode-entry)
    (add-hook 'org-mode-hook #'my/org-auto-tangle-enable)
    (add-hook 'org-mode-hook #'my/org-mode-entry)
    )
#+end_src

*** org-mouse :builtin:package:

Builtin additional mouse support for org-mode

#+begin_src elisp :tangle init.el :comments link
  (use-package org-mouse
    :after (org)
    :config
    (require 'org-mouse))
#+end_src

*** org-modern :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package org-modern
    :straight t
    :after (org)
    :config
    (setq org-modern-table nil
  	  org-modern-block-name nil
  	  org-modern-block-fringe nil
            org-modern-star 'replace))
#+end_src

#+begin_src elisp :tangle defun.el :comments link
  (defun my/org-mode-entry ()
      "Enable visual line mode and set word wrap in non-programming modes."
      (org-modern-mode 1))
#+end_src



*** Nicer Exports

Additional stuff to beautify org-mode exports.

**** htmlize :package:

Richer html export, f.x. syntax highlighting in code blocks.

#+begin_src elisp :tangle init.el :comments link
  (use-package htmlize
    :straight t)
#+end_src

** Programming

*** Languages

**** elisp

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :config
    ;; Enable the use of outline-mode when editing elisp files.
    (add-hook 'emacs-lisp-mode-hook 'outline-minor-mode))
#+end_src

**** Nix

***** nix-mode :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package nix-mode
    :straight t
    :defer t
    :mode "\\.nix\\'")
#+end_src

***** nix-ts-mode :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package nix-ts-mode
    :straight t
    :if (treesit-language-available-p 'nix)
    :defer t
    :init
    (setq major-mode-remap-alist
  	(append major-mode-remap-alist
  		'((nix-mode . nix-ts-mode)))))
#+end_src

**** Configuration Files

***** conf-mode :builtin:package:


#+begin_src elisp :tangle init.el :comments link
  (use-package conf-mode
    :straight nil ;; builtin
    :mode "\\.inputrc\\'"
    :hook
    (conf-mode . display-line-numbers-mode)
    (conf-mode . (lambda () (setq-local truncate-lines t)))         ;; Enable line numbers 
    )
#+end_src

****** TODO move conf-mode into variable list bundle up with other programming modes

**** YAML

***** yaml :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package yaml-ts-mode
    :if (treesit-language-available-p 'yaml)
    :defer t
    :mode (("\\.ya?ml\\'" . yaml-ts-mode))
    :hook ((yaml-ts-mode . (lambda () (setq-local tab-width 2))))
    )
#+end_src

**** Python

***** python :builtin:package:

#+begin_src elisp :tangle init.el :comments link
  (use-package python
    :init
    (if (treesit-language-available-p 'python)
        (setq major-mode-remap-alist
  	    (append major-mode-remap-alist
  		    '((python-mode . python-ts-mode))))))
#+end_src


*** LSP

#+begin_src elisp :tangle init.el :comments link
  (use-package eglot
    :defer t
    :config
    (with-eval-after-load 'eglot
      (add-to-list 'eglot-server-programs
  		 `(nix-ts-mode . ("nixd" :initializationOptions
  				 (:formatting (:command "alejandra")))))
      (add-to-list 'eglot-server-programs
  		 `(nix-mode . ("nixd" :initializationOptions
  				 (:formatting (:command "alejandra"))))))
    )

  ;; (with-eval-after-load 'eglot
  ;;   (add-to-list 'eglot-server-programs
  ;; 		   `((nix-mode . ("nixd" :initializationOptions
  ;; 				     (:formatting (:command "nixfmt")))))))
  ;; )
#+end_src

*** TODO Formatting
*** TODO Programming Specific Editor Configuration

#+begin_src elisp :tangle defun.el :comments link
#+end_src
** Utilities
*** rainbow-mode :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package rainbow-mode
    :straight t)
#+end_src

*** qrencode :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package qrencode
    :straight t)
#+end_src

*** keycast :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package keycast
    :straight t)
#+end_src

*** vterm :package:

Probably the best & most performant traditional terminal emulation/experiance you can get with Emacs. It's however non-trivial to install beyond just grabbing the package, thus I opt to install it outside of this configuration & call/configure the package only when it's available.

#+begin_src elisp :tangle init.el :comments link
  (condition-case nil
      (progn
	(require 'vterm)
	(use-package vterm
	:after (general)
	:config
	(leader-keys
	  "ot" '(vterm :which-key "vterm")
	  "oot" '(vterm-other-window :which-key "vterm"))
	;; Make vterm more responsive
	(setq vterm-timer-delay 0.01)
	(setq vterm-kill-buffer-on-exit t)))
    (error
     (message "Failed to load vterm")))
#+end_src

** User Interface

*** Cursor

**** evil-terminal-cursor-changer :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package evil-terminal-cursor-changer
    :straight t
    :if (not (display-graphic-p))
    :config
    (evil-terminal-cursor-changer-activate))
#+end_src

**** pulsar :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package pulsar
    :disabled
    :straight t
    :config
    ;; (add-to-list 'pulsar-pulse-region-functions 'evil-yank)
    ;; (add-to-list 'pulsar-pulse-functions 'evil-yank)
    (add-to-list 'pulsar-pulse-functions 'evil-jump-backward)
    (setq pulsar-pulse-functions (remove 'evil-scroll-up pulsar-pulse-functions))
    (setq pulsar-pulse-functions (remove 'evil-scroll-down pulsar-pulse-functions))
    (pulsar-global-mode))
#+end_src

*** Transient Menus

**** Casual :package:

A collection of opinionated keyboard-driven user interfaces for various built-in Emacs modes. 

#+begin_src elisp :tangle init.el :comments link
  (use-package casual
    :straight t)
#+end_src

**** dired

#+begin_src elisp :tangle defun.el :comments link
  (defun my/transient-menu ()
    "Toggle transient menus based on derived modes."
    (interactive)
    (when (derived-mode-p 'dired-mode)
      (casual-dired-tmenu))
    )
#+end_src

*** Layout

**** spacious-padding :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package spacious-padding
    :straight t
    :config
    (setq spacious-padding-widths
	'( :internal-border-width 15
	     :header-line-width 4
	     :mode-line-width 2
	     :tab-width 4
	     :right-divider-width 30
	     :scroll-bar-width 8
	     :fringe-width 8))
    (spacious-padding-mode 1)
    )
#+end_src

**** vi-tilde-fringe :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package vi-tilde-fringe
    :straight t
    :diminish vi-tilde-fringe-mode
    :hook (prog-mode-hook . vi-tilde-fringe-mode))
#+end_src


**** TODO modeline

***** Show current project

#+begin_src elisp :tangle init.el :comments link
  (use-package project
    :custom
    (project-mode-line t))
#+end_src

***** Hide line/column numbers

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :init
    (line-number-mode -1)
    (column-number-mode -1))
#+end_src

***** diminish :builtin:package:

I various =use-package= package declarations in my configuration, you can see a =:diminish= clause. This will prevent the display of declared minor modes being displayed in the modeline.

#+begin_src elisp :tangle init.el :comments link
  (use-package diminish
    :straight t
    :config
    ;; (diminish 'buffer-face-mode)
    ;; (diminish 'BufFace)
    )
#+end_src

*** Icons
**** nerd-icons :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package nerd-icons
    :straight t)
#+end_src

***** nerd-icons-dired :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package nerd-icons-dired
    :straight t
    :after nerd-icons
    :hook (dired-mode . nerd-icons-dired-mode))
#+end_src

***** nerd-icons-completion :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package nerd-icons-completion
    :straight t
    :after (nerd-icons marginalia)
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)
    )
#+end_src



***** nerd-icons-corfu :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package nerd-icons-corfu
    :straight t
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)

    ;; Optionally:
    ;; (setq nerd-icons-corfu-mapping
    ;; 	'((array :style "cod" :icon "symbol_array" :face font-lock-type-face)
    ;;         (boolean :style "cod" :icon "symbol_boolean" :face font-lock-builtin-face)
    ;;         ;; You can alternatively specify a function to perform the mapping,
    ;;         ;; use this when knowing the exact completion candidate is important.
    ;;         (file :fn nerd-icons-icon-for-file :face font-lock-string-face)
    ;;         ;; ...
    ;;         (t :style "cod" :icon "code" :face font-lock-warning-face)))
    ;; Remember to add an entry for `t', the library uses that as default.

    ;; The Custom interface is also supported for tuning the variable above.
    )
#+end_src

*** Mouse Support

#+begin_src elisp :tangle init.el :comments link
  ;; right click mouse menu
  (context-menu-mode 1)
#+end_src

*** Theme

#+begin_src elisp :tangle init.el :comments link
  ;; Mark all themes as safe so emacs won't ask & annoy you
  (setq custom-safe-themes t)
#+end_src

**** TODO modus-themes :package:

- [ ] Change font of rainbow mode faces

/Highly accessible themes by Protesilous, conforming with the highest standard for colour contrast between background and foreground values/

#+begin_src elisp :tangle init.el :comments link
  (use-package modus-themes
    :straight t
    :config
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
    	modus-themes-bold-constructs t)

    (setq modus-themes-common-palette-overrides
  	`((fg-region unspecified)
  	  (bg-region bg-sage)
  	  
  	  ;; A nuanced accented background, combined with a suitable foreground.
  	  (bg-prose-code bg-green-nuanced)
  	  (fg-prose-code green-cooler)
  	  
  	  (bg-prose-verbatim bg-magenta-nuanced)
  	  (fg-prose-verbatim magenta-warmer)
  	  
  	  (bg-prose-macro bg-blue-nuanced)
  	  (fg-prose-macro magenta-cooler)))
    
    (setq modus-vivendi-palette-overrides
  	`((bg-main "#000000")
  	  (fg-heading-1 magenta-faint)
  	  (bg-line-number-active "#2f3849")))
    
    (setq modus-operandi-palette-overrides
  	'((fg-heading-1 "#2f5f9f")
  	  (bg-region "#c0deff")
  	  (bg-line-number-active "#dae5ec")))

    (setq modus-themes-headings
    	'((0 . (1.35))
            (1 . (1.30))
            (2 . (1.24))
            (3 . (semibold 1.17))
            (4 . (1.14))
            (t . (monochrome))))

    (add-hook 'modus-themes-after-load-theme-hook #'my/modus-themes-custom-faces)
    (add-hook 'after-init-hook #'my/modus-themes-custom-faces)
    (load-theme 'modus-vivendi))
#+end_src

#+begin_src elisp :tangle defun.el :comments link
  (defun my/modus-themes-custom-faces (&rest _)
    (modus-themes-with-colors
    (custom-set-faces

     ;; Change nerd-icons folder colors
     '(nerd-icons-folder ((t (:foreground "#008899"))))
     '(nerd-icons-folder-open ((t (:foreground "#008899"))))
     '(nerd-icons-completion-dir-face ((t (:foreground "#008899"))))
     '(nerd-icons-dired-dir-face ((t (:foreground "#008899"))))


     ;; diff-hl fringe/margin colors
     '(diff-hl-insert ((t (:background "#88ca9f" :foreground "#092f1f"))))
     '(diff-hl-delete ((t (:background "#ff7f86" :foreground "#3a0c14"))))
     '(diff-hl-change ((t (:background "#dfaf7a" :foreground "#381d0f"))))

     ;; org-mode mixed fonts
     '(org-checkbox ((t (:inherit 'fixed-pitch))))
     '(org-block ((t (:foreground nil :inherit 'fixed-pitch))))
     '(org-block-begin-line ((t (:inherit 'fixed-pitch))))
     ;; '(org-block-end-line ((t (:inherit 'fixed-pitch))))
     '(org-table ((t (:inherit 'fixed-pitch))))
     '(org-code ((t (:inherit 'fixed-pitch))))

     ;; corfu mixed fonts
     '(corfu-default ((t (:inherit 'fixed-pitch))))
     
     ;; Vundo symbol colors
     '(vundo-saved ((t (:foreground "#008899"))))
     '(vundo-last-saved ((t (:foreground "#900276"))))
     )))
#+end_src

**** auto-dark :package:

/Toggle between two themes in sync with system dark/light mode/

#+begin_src elisp :tangle init.el :comments link
  (use-package auto-dark
    :straight t
    :diminish auto-dark-mode
    :if (display-graphic-p)
    :custom
    (auto-dark-themes '((modus-vivendi) (modus-operandi)))
    (auto-dark-polling-interval-seconds 5)
    (auto-dark-allow-osascript nil)
    (auto-dark-allow-powershell nil)
    :init (auto-dark-mode))
#+end_src

*** Text alignment

**** visual-fill-column :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package visual-fill-column
    :straight t
    :defer t
    :custom
    (visual-fill-column-width 100)
    :hook (org-mode . (lambda ()
			(visual-fill-column-mode)
			;; (visual-line-fill-column-mode)
			(visual-fill-column-toggle-center-text)))
    )
#+end_src

*** Tweaks

**** Disable scrollbars in the minibuffer

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :config
    (set-window-scroll-bars (minibuffer-window) nil nil nil nil 1)
    (set-window-parameter (get-buffer-window "*Messages*") 'vertical-scroll-bars nil))
#+end_src


*** Fullscreen

#+begin_src elisp :tangle defun.el :comments link
  (defun my/toggle-menu-bar-in-fullscreen ()
    "Toggle `menu-bar-mode' when entering or exiting fullscreen."
    (if (eq (frame-parameter nil 'fullscreen) 'fullboth)
	(menu-bar-mode -1)  ; Turn off menu bar in fullscreen
      (menu-bar-mode 1)))   ; Turn on menu bar when not in fullscreen
#+end_src

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :config
    (add-hook 'after-make-frame-functions
	      (lambda (frame) 
			(with-selected-frame frame
		  (my/toggle-menu-bar-in-fullscreen))))

    (add-hook 'window-configuration-change-hook
  	    'my/toggle-menu-bar-in-fullscreen))
#+end_src

** LLM Integration

*** gptel :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package gptel
    :straight t
    :config
    (setq gptel-default-mode #'org-mode))
#+end_src

** Version Control

*** Follow symlinks

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :config
    ;; Always follow symbolic link to a file under version control.
    (setq vc-follow-symlinks t))
#+end_src

*** magit :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package magit
    :straight t)
#+end_src

*** Handled backends

I've only ever used Git for version control, and I've heard that focusing the scope of allowed version control backends can have positive performance implications.

#+begin_src elisp :tangle init.el :comments link
  (use-package vc
    :config
    (setq vc-handled-backends '(Git)))  
#+end_src

*** diff-hl :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package diff-hl
    :straight t
    :after (magit)
    :config
    (global-diff-hl-mode 1)
    (global-diff-hl-show-hunk-mouse-mode 1)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    ;; Re-center the window around curser after jumping hunks
    (advice-add 'diff-hl-next-hunk :after (lambda (&rest _args) (recenter)))
    (advice-add 'diff-hl-previous-hunk :after (lambda (&rest _args) (recenter)))
    )
#+end_src

Highlight uncommitted changes on the sides of a buffer window.

** Help, Information & Documentation

*** helpful :package:

#+begin_src elisp :tangle init.el :comments link
  (use-package helpful
    :straight t
  :config
    (global-set-key (kbd "C-h f") #'helpful-callable)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-h x") #'helpful-command)
    (global-set-key (kbd "C-c C-d") #'helpful-at-point)
    (global-set-key (kbd "C-h F") #'helpful-function))
#+end_src

*** which-key :builtin:package:

#+begin_src elisp :tangle init.el :comments link
  (use-package which-key
    :after (diminish)
    :diminish (which-key-mode)
    :config
    (which-key-mode 1))
#+end_src

*** eldoc :builtin:package:

#+begin_src elisp :tangle init.el :comments link
  (use-package eldoc
    :after (diminish)
    :diminish eldoc-mode)
#+end_src

** Window Management

*** Context grouping

**** Help modes :elisp_variable:

#+begin_src elisp :tangle defvar.el :comments link
  (defvar my/help-modes-list '(helpful-mode
  			     help-mode
  			     ;; pydoc-mode
  			     ;; TeX-special-mode
  			     )
    "List of major-modes used in documentation buffers")
#+end_src

*** Popup Buffers

**** popper :package:

#+begin_src elisp :tangle init.el :comments link
  (defun my/max-window-height ()
    "Return the maximum of the output of `popper--fit-window-height` and 10."
    (max (popper--fit-window-height) 10))
#+end_src

#+begin_src elisp :tangle init.el :comments link
  (use-package popper
    :straight t
    ;; :after (setup-windows setup-project)
    :commands popper-mode
    :init
    (if (boundp 'elpaca-after-init-hook)
	(add-hook 'elpaca-after-init-hook #'popper-mode)
      (add-hook 'emacs-startup-hook #'popper-mode))
    (setq popper-window-height 'my/max-window-height)
    (setq popper-reference-buffers
	  (append my/help-modes-list
		  ;; Match eshell, shell, term and/or vterm buffers
		  '("^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
		    "^\\*shell.*\\*$"  shell-mode  ;shell as a popup
		    "^\\*term.*\\*$"   term-mode   ;term as a popup
		    "^\\*vterm.*\\*$"  vterm-mode  ;vterm as a popup
		    )))
    )
#+end_src

*** Layout History

#+begin_src elisp :tangle init.el :comments link
  (use-package emacs
    :init
    (winner-mode 1))
#+end_src

* Custom Functions

*** TODO Auto tangle on save :elisp_function:

+ Make case insensitive

#+begin_src elisp :tangle defun.el :comments link
  (defun my/org-auto-tangle ()
    "Automatically tangle Org file on save, but only if the file contains '#+auto_tangle: t'."
    (when (and (derived-mode-p 'org-mode)
               (save-excursion
                 (goto-char (point-min))
                 (re-search-forward "^#\\+auto_tangle: t" nil t)))
      (org-babel-tangle)))

  (defun my/org-auto-tangle-enable ()
    "Enable auto-tangling for this buffer."
    (add-hook 'after-save-hook #'my/org-auto-tangle nil 'local))

#+end_src


*** Toggle org-mode emphasis markers :elisp_function:

/Toggle `org-hide-emphasis-markers' locally and refresh fontification./

#+begin_src elisp :tangle defun.el :comments link
  (defun my/org-toggle-hide-emphasis-markers ()
    "Toggle `org-hide-emphasis-markers' locally and refresh fontification."
    (interactive)
    (if (bound-and-true-p org-hide-emphasis-markers)
        (setq-local org-hide-emphasis-markers nil)
      (setq-local org-hide-emphasis-markers t))
    ;; Refresh fontification
    (font-lock-flush)
    (font-lock-ensure)
    ;; (message "org-hide-emphasis-markers is now %s" org-hide-emphasis-markers)
    )
#+end_src

#+begin_src elisp :tangle init.el :comments link
  (define-key org-mode-map (kbd "C-c e") #'my/org-toggle-hide-emphasis-markers)
#+end_src


* Glossary

** Lexical Binding

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical Binding - GNU Emacs Manual]]

+ Will increase performance
+ Often seen contained in the header of .el files

** use-package

[[https://www.gnu.org/software/emacs/manual/html_node/use-package/][use-package - GNU Emacs Manual]]

+ A macro that allows you to set up package customization in your init file in a declarative way.
+ Allows for lazy loading packages to speed up performance
+ Keeps your emacs configuration tidy

** straight.el

[[https://github.com/radian-software/straight.el?tab=readme-ov-file#installing-packages-programmatically][straight.el - Github Documentation]]

+ Next-generation, purely functional package manager
+ Declare package sources from either repositories or git revisions
+ Modern lockfile capabilities
